/**
 * Generated by orval v6.23.0 üç∫
 * Do not edit manually.
 * Cheatgame API
 * OpenAPI spec version: 1.0.0 (v1)
 */
import { customInstance } from './mutator'

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
  T
>() => T extends Y ? 1 : 2
  ? A
  : B

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<
    { [Q in P]: T[P] },
    { -readonly [Q in P]: T[P] },
    P
  >
}[keyof T]

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (
  k: infer I
) => void
  ? I
  : never
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never

type Writable<T> = Pick<T, WritableKeys<T>>
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object
        ? NonReadonly<NonNullable<T[P]>>
        : T[P]
    }
  : DistributeReadOnlyOverUnions<T>

export interface UserOutPut {
  birthdate?: string | null
  created_at?: string
  email?: string | null
  firstname: string
  lastname: string
  phone_number: string
  profile_image?: string | null
  readonly updated_at: string
}

export interface UserInput {
  birthdate?: string
  email: string
  firstname: string
  lastname: string
  profile_image?: string
}

export interface TokenVerify {
  token: string
}

export interface TokenRefresh {
  readonly access: string
  refresh: string
}

export interface OutPutRegister {
  created_at?: string
  firstname: string
  lastname: string
  phone_number: string
  readonly token: string
  readonly updated_at: string
}

export interface OutPutLogin {
  readonly token: string
}

export interface InputVerifyPhoneSerilazer {
  otp: number
  phone_number: string
}

export interface InputVerifyEmail {
  email: string
  otp: number
}

export interface InputRegister {
  confirm_password: string
  firstname: string
  lastname: string
  password: string
  phone_number: string
}

export interface InputPhoneOtp {
  phone_number: string
}

export interface InputPasswordOtp {
  phone_number: string
}

export interface InputEmailOtp {
  email: string
}

export interface InputChangePassword {
  confirm_new_password: string
  new_password: string
  otp: number
}

export interface InPutLogin {
  password: string
  phone_number: string
}

export const apiAuthJwtAdminLoginCreate = (inPutLogin: InPutLogin) => {
  return customInstance<OutPutLogin>({
    url: `/api/auth/jwt/admin-login/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: inPutLogin
  })
}

export const apiAuthJwtCustomerLoginCreate = (inPutLogin: InPutLogin) => {
  return customInstance<OutPutLogin>({
    url: `/api/auth/jwt/customer-login/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: inPutLogin
  })
}

export const apiAuthJwtManagerLoginCreate = (inPutLogin: InPutLogin) => {
  return customInstance<OutPutLogin>({
    url: `/api/auth/jwt/manager-login/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: inPutLogin
  })
}

/**
 * Takes a refresh type JSON web token and returns an access type JSON web
token if the refresh token is valid.
 */
export const apiAuthJwtRefreshCreate = (
  tokenRefresh: NonReadonly<TokenRefresh>
) => {
  return customInstance<TokenRefresh>({
    url: `/api/auth/jwt/refresh/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: tokenRefresh
  })
}

/**
 * Takes a token and indicates if it is valid.  This view provides no
information about a token's fitness for a particular use.
 */
export const apiAuthJwtVerifyCreate = (tokenVerify: TokenVerify) => {
  return customInstance<TokenVerify>({
    url: `/api/auth/jwt/verify/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: tokenVerify
  })
}

export const apiUserChangePasswordCreate = (
  inputChangePassword: InputChangePassword
) => {
  return customInstance<void>({
    url: `/api/user/change-password/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: inputChangePassword
  })
}

export const apiUserRegisterCreate = (inputRegister: InputRegister) => {
  return customInstance<OutPutRegister>({
    url: `/api/user/register/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: inputRegister
  })
}

export const apiUserRequestVerifyPhoneCreate = (
  inputPhoneOtp: InputPhoneOtp
) => {
  return customInstance<void>({
    url: `/api/user/request-verify-phone/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: inputPhoneOtp
  })
}

export const apiUserRequsetChangePasswordCreate = (
  inputPasswordOtp: InputPasswordOtp
) => {
  return customInstance<void>({
    url: `/api/user/requset-change-password/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: inputPasswordOtp
  })
}

export const apiUserRequsetVerifyEmaliCreate = (
  inputEmailOtp: InputEmailOtp
) => {
  return customInstance<void>({
    url: `/api/user/requset-verify-emali/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: inputEmailOtp
  })
}

export const apiUserUserRetrieve = () => {
  return customInstance<UserOutPut>({ url: `/api/user/user/`, method: 'GET' })
}

export const apiUserUserUpdate = (userInput: UserInput) => {
  const formData = new FormData()
  formData.append('firstname', userInput.firstname)
  formData.append('lastname', userInput.lastname)
  formData.append('email', userInput.email)
  if (userInput.birthdate !== undefined) {
    formData.append('birthdate', userInput.birthdate)
  }
  if (userInput.profile_image !== undefined) {
    formData.append('profile_image', userInput.profile_image)
  }

  return customInstance<UserOutPut>({
    url: `/api/user/user/`,
    method: 'PUT',
    headers: { 'Content-Type': 'multipart/form-data' },
    data: formData
  })
}

export const apiUserVerifyEmailCreate = (
  inputVerifyEmail: InputVerifyEmail
) => {
  return customInstance<void>({
    url: `/api/user/verify-email/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: inputVerifyEmail
  })
}

export const apiUserVerifyPhoneCreate = (
  inputVerifyPhoneSerilazer: InputVerifyPhoneSerilazer
) => {
  return customInstance<void>({
    url: `/api/user/verify-phone/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: inputVerifyPhoneSerilazer
  })
}

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

export type ApiAuthJwtAdminLoginCreateResult = NonNullable<
  Awaited<ReturnType<typeof apiAuthJwtAdminLoginCreate>>
>
export type ApiAuthJwtCustomerLoginCreateResult = NonNullable<
  Awaited<ReturnType<typeof apiAuthJwtCustomerLoginCreate>>
>
export type ApiAuthJwtManagerLoginCreateResult = NonNullable<
  Awaited<ReturnType<typeof apiAuthJwtManagerLoginCreate>>
>
export type ApiAuthJwtRefreshCreateResult = NonNullable<
  Awaited<ReturnType<typeof apiAuthJwtRefreshCreate>>
>
export type ApiAuthJwtVerifyCreateResult = NonNullable<
  Awaited<ReturnType<typeof apiAuthJwtVerifyCreate>>
>
export type ApiUserChangePasswordCreateResult = NonNullable<
  Awaited<ReturnType<typeof apiUserChangePasswordCreate>>
>
export type ApiUserRegisterCreateResult = NonNullable<
  Awaited<ReturnType<typeof apiUserRegisterCreate>>
>
export type ApiUserRequestVerifyPhoneCreateResult = NonNullable<
  Awaited<ReturnType<typeof apiUserRequestVerifyPhoneCreate>>
>
export type ApiUserRequsetChangePasswordCreateResult = NonNullable<
  Awaited<ReturnType<typeof apiUserRequsetChangePasswordCreate>>
>
export type ApiUserRequsetVerifyEmaliCreateResult = NonNullable<
  Awaited<ReturnType<typeof apiUserRequsetVerifyEmaliCreate>>
>
export type ApiUserUserRetrieveResult = NonNullable<
  Awaited<ReturnType<typeof apiUserUserRetrieve>>
>
export type ApiUserUserUpdateResult = NonNullable<
  Awaited<ReturnType<typeof apiUserUserUpdate>>
>
export type ApiUserVerifyEmailCreateResult = NonNullable<
  Awaited<ReturnType<typeof apiUserVerifyEmailCreate>>
>
export type ApiUserVerifyPhoneCreateResult = NonNullable<
  Awaited<ReturnType<typeof apiUserVerifyPhoneCreate>>
>
